
# Extract events from category codes.
import pandas as pd
import numpy as np
import sys

sys.path.append('./utils')
film_df = pd.read_csv('./data/clean/letterboxd_clean_films.csv') # update path to file to work with
film_df

# Dictionary for event description

event_dict = {
    '153': 'dogs dying',
    '319': 'animals harmed during making',
    '189': 'animals (besides dog/cat/horse) dying',
    '229': 'animal abuse',
    '231': 'dog fighting',
    '252': 'dead animals',
    '355': 'sad animals',
    '338': 'harmed rabbits',
    '186': 'cats dying',
    '285': 'pets die',
    '196': 'dragons dying',
    '165': 'spiders',
    '332': 'alligators/crocodiles',
    '214': 'snakes',
    '337': 'sharks',
    '213': 'bugs',
    '183': 'horses dying',
    '293': 'child abandonment',
    '350': 'abandoned animals',
    '363': 'leave without goodbye',
    '242': 'stalking',
    '347': 'abused forgives abuser',
    '304': 'abused becomes abuser',
    '237': 'gaslighting',
    '365': 'abuse with belt',
    '218': 'child abuse',
    '367': 'women brutalized for spectacle',
    '219': 'domestic violence',
    '330': 'abusive parents',
    '225': 'alcohol abuse',
    '230': 'addiction',
    '193': 'drug use',
    '320': 'pedophilia',
    '308': 'held under water',
    '326': 'rape mentions',
    '321': 'beaten up by bully',
    '274': 'restraints',
    '182': 'sexual assault',
    '360': 'mouth covering',
    '315': 'sexual assault on men is a joke',
    '292': 'onscreen rape',
    '342': 'women slapped',
    '299': 'druggings',
    '352': 'hand damage',
    '362': 'dislocations',
    '361': 'throat mutilation',
    '245': 'choking',
    '331': 'decapitation',
    '254': 'cannibalism',
    '282': 'crushed to death',
    '309': 'chokings',
    '164': 'people being burned alive',
    '240': 'buried alive',
    '296': 'body horror',
    '250': 'amputation',
    '223': 'heads getting squashed',
    '280': 'Achilles Tendon injury',
    '177': 'shaving or cutting',
    '281': 'asphyxiation',
    '258': 'genital trauma/mutilation',
    '298': 'unconscious',
    '216': 'bones breaking',
    '206': 'seizures',
    '210': 'teeth damage',
    '171': 'finger or toe mutilation',
    '203': 'torture',
    '271': 'falling down stairs',
    '211': 'falling deaths',
    '200': 'eye mutilation',
    '343': 'stabbings',
    '267': 'excessive gore',
    '227': 'hangings',
    '284': 'infant abduction',
    '287': 'sexualized minor',
    '158': 'kids dying',
    '357': 'bedbugs',
    '289': 'self-sacrifice',
    '305': 'non-human death',
    '311': 'someone dies',
    '328': 'major character dies',
    '353': 'disabled played by able-bodied',
    '272': 'R-slur',
    '275': 'overdose',
    '168': 'parents dying',
    '253': 'dear toy destruction',
    '243': 'kidnapping',
    '313': 'family dies',
    '241': 'cheating',
    '207': 'ghosts',
    '161': 'jump scares',
    '176': 'shower scenes',
    '335': 'bodies of water',
    '174': 'clowns',
    '224': 'demonic possession',
    '312': 'trypophobia',
    '297': 'razors',
    '295': 'mannequins',
    '201': 'vomiting',
    '257': 'wet/soiled pants',
    '324': 'farting',
    '322': 'someone is eaten',
    '354': 'pooping',
    '180': 'spitting',
    '255': 'audio gore',
    '283': '9/11',
    '256': 'copaganda',
    '345': 'incarceration',
    '359': 'trans person depicted predatorily',
    '310': 'deadnaming / birthnaming',
    '368': 'LGBT+ person outed',
    '314': 'transphobic slurs',
    '301': 'bisexual cheating',
    '329': 'artifact destroyed',
    '190': 'needles or syringes are used',
    '205': 'electro-therapy',
    '192': 'hospital scenes',
    '358': 'menstruation',
    '204': 'cancer',
    '220': 'mental institutions',
    '199': 'self harming',
    '349': 'autism misrepresented',
    '263': 'violent mentally ill person',
    '370': 'dissociation / depersonalization / derealization',
    '302': 'D.I.D. misrepresentation',
    '248': 'autism abuse',
    '286': 'suicide attempts',
    '334': 'reality unhinged',
    '336': 'mental illness',
    '260': 'misophonia',
    '235': 'anxiety attacks',
    '323': 'ABA therapy',
    '259': 'suicide threats',
    '306': 'body dysphoria',
    '195': 'body dysmorphia',
    '202': 'claustrophobic scenes',
    '217': 'eating disorders',
    '187': 'people dying by suicide',
    '265': 'PTSD',
    '348': 'meltdowns',
    '356': 'underwater scenes',
    '339': 'sudden loud noises',
    '181': 'shaky cam',
    '261': 'crying babies',
    '366': 'screaming',
    '290': 'obscene language/gestures',
    '167': 'flashing lights or images',
    '318': 'being watched',
    '268': 'fourth wall',
    '264': 'stillbirths',
    '215': 'miscarriages',
    '266': 'babies/unborn',
    '228': 'childbirth',
    '238': 'abortions',
    '239': 'pregnant people deaths',
    '247': 'homophobic slurs',
    '244': 'ableism',
    '246': 'antisemitism',
    '262': 'man in a dress jokes',
    '226': 'misgendering',
    '194': 'LGBT people dying',
    '233': 'fat jokes',
    '303': 'aphobia',
    '251': 'n-word usage',
    '234': 'black guy dies first',
    '212': 'hate speech',
    '294': 'minority misrepresentation',
    '325': 'blackface',
    '277': 'large age gap',
    '351': 'religion discussed',
    '369': 'demons or Hell',
    '279': 'nude scenes',
    '307': 'bestiality',
    '317': 'lose virginity',
    '276': 'sexual objectification',
    '236': 'incest',
    '197': 'sexual content',
    '364': 'BDSM',
    '273': 'male crying ridicule',
    '278': 'strokes',
    '288': 'chronic illnesses',
    '291': 'dementia/Alzheimer\'s',
    '327': 'terminal illness',
    '300': 'fat suits',
    '270': 'homelessness',
    '341': 'existentialism',
    '316': 'anti-abortion',
    '209': 'Santa (et al) spoilers',
    '346': 'end credit scenes',
    '222': 'sad endings',
    '269': 'car honk / tire screech',
    '184': 'car crashes',
    '198': 'planes crashing',
    '208': 'people getting hit by cars',
    '191': 'drownings',
    '188': 'blood or gore',
    '221': 'nuclear explosions',
    '232': 'gun violence'
}


df = film_df.copy()

def topic_to_event(topics):
    if pd.isna(topics):
        return None
    topic_list = topics.split(',')
    events = [event_dict.get(topic.strip(), '') for topic in topic_list]
    return ', '.join(event for event in events if event) # join or skip empty string

df['events'] = df['topics'].apply(topic_to_event)

def check_warnings(events):
    if events is None:  # if 'events' is None, set to False
        return False
    elif pd.isna(events):  
        return np.nan
    else: 
        return True

df['has_warnings'] = df['events'].apply(check_warnings)

print(df[['events', 'has_warnings']].head())


